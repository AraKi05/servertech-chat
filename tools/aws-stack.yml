#
# Copyright (c) 2023 Ruben Perez Hidalgo (rubenperez038 at gmail dot com)
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#

# A CloudFormation stack describing the required infrastructure to run our
# application in AWS. This is used by the CI to deploy. All of the parameters
# can be passed by the CI to configure things.

AWSTemplateFormatVersion: 2010-09-09
Parameters:
  # Some regions support t2.micro and some others do not, so we allow the instance
  # type to be configured
  InstanceType:
    Type: String
    Description: The instance EC2 type that will be launched
    Default: t3.micro
  # Full image for the cppserver container (including the tag). Changing this
  # updates the application to a newer version
  CppserverImage:
    Type: String
    Description: The Docker fully-qualified image for the cppserver container
  # Optional SSH key pair to enable SSH access to the deployed machine
  KeyName:
    Type: String
    Description: |
      Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
      Leave it blank to disable SSH access.
    Default: ""
  # AMIs are region-dependant. This construct uses AWS SSM to retrieve the latest
  # AMI ID for our region.
  ImageId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Description: |
      The machine image (AMI) to use. Defaults to latest Amazon Linux.
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
Conditions:
  EnableSSH: !Not [!Equals [!Ref KeyName, ""]]

Resources:
  # A security group for our EC2 instance, to allow inbound traffic
  EcsSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: ECS Security Group
      SecurityGroupIngress:
        # Allow inbound HTTP traffic
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        # Allow inbound SSH traffic
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"

  # A static IP address. This guarantees that your application will always
  # run under the same, static IP address even between restarts
  StaticIpAddress:
    Type: "AWS::EC2::EIP"
    Properties:
      InstanceId: !Ref WebServer

  # An EBS volume to store persistent data. This guarantees that our data
  # lives even if the EC2 instance is re-created
  DatabaseVolume:
    Type: "AWS::EC2::Volume"
    Properties:
      # Deploy to the first availability zone for the current region. This
      # must match the AvailabilityZone in the EC2 instance definition
      AvailabilityZone: !Select [0, { "Fn::GetAZs": "" }]
      Encrypted: true
      VolumeType: gp3
      Size: 8 # GiB

  # The actual EC2 instance that will run our server. UserData contains
  # a script that is run by the EC2 instance every time it boots. We launch
  # our Docker containers there. The cloud_final_modules part is required
  # to ensure that the script is run every time the instance is launched.
  # Otherwise, it's run only on creation, and updates won't take affect.
  WebServer:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      AvailabilityZone: !Select [0, { "Fn::GetAZs": "" }]
      SecurityGroups:
        - !Ref EcsSecurityGroup
      Volumes:
        - Device: /dev/xvdk # This name is used in the UserData script to mount the volume
          VolumeId: !Ref DatabaseVolume
      KeyName: !If [EnableSSH, !Ref KeyName, !Ref "AWS::NoValue"]
      UserData: !Base64
        "Fn::Sub": |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash -xe

          # Dependencies
          yum install -y aws-cfn-bootstrap docker 

          # Format (if required) and mount the volume for DB storage
          if [ "$(file -sL /dev/xvdk)" == "/dev/xvdk: data" ]; then
              mkfs -t xfs /dev/xvdk
          fi
          mkdir -p /data
          mount /dev/xvdk /data

          # Remove previous containers and networks
          systemctl start docker
          docker container prune -f
          docker network rm chat-net || echo "Network does not exist"

          # Run our application
          docker run -d --name redis -v /data/redis-data:/data redis:alpine redis-server --appendonly yes
          docker run -d -p 80:80 -e REDIS_HOST=redis --name cppserver ${CppserverImage}
          docker network create chat-net # Connect these two
          docker network connect chat-net redis
          docker network connect chat-net cppserver
          docker image prune -f # Remove unused images

          # Signal AWS that we're done
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerGroup --region ${AWS::Region} # Signal AWS we're OK

Outputs:
  WebServerIp:
    Description: The IP where the webserver is listening
    Value: !Ref StaticIpAddress
